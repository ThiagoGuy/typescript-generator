{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/generator/classGenerator.ts","webpack:///./src/app/generator/enums/assignments.enum.ts","webpack:///./src/app/generator/enums/encryption.enum.ts","webpack:///./src/app/generator/enums/generatorTypes.enum.ts","webpack:///./src/app/generator/enums/question.enum.ts","webpack:///./src/app/generator/generatorFactory.ts","webpack:///./src/app/generator/models/arrayAttribute.ts","webpack:///./src/app/generator/models/arrayInstance.ts","webpack:///./src/app/generator/models/arraySetter.ts","webpack:///./src/app/generator/models/attribute.ts","webpack:///./src/app/generator/models/class.ts","webpack:///./src/app/generator/models/content.ts","webpack:///./src/app/generator/models/import.ts","webpack:///./src/app/generator/models/instance.ts","webpack:///./src/app/generator/models/setter.ts","webpack:///./src/app/generator/options/classOptions.ts","webpack:///./src/app/generator/options/interfaceOptions.ts","webpack:///./src/app/generator/options/setterOptions.ts","webpack:///./src/app/generator/service/utils.service.ts","webpack:///./src/app/generator/setterGenerator.ts","webpack:///./src/app/generator/writers/classWriter.ts","webpack:///./src/app/generator/writers/interfaceWriter.ts","webpack:///./src/app/generator/writers/setterWriter.ts","webpack:///./src/app/generator/writers/writer.ts","webpack:///./src/app/pipe/enumToArray.pipe.ts","webpack:///./src/app/service/alert.service.ts","webpack:///./src/app/service/utils.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\\r\\ndiv {\\r\\n    display: flex;\\r\\n    flex-direction: column;\\r\\n    justify-content: center;\\r\\n}\\r\\n\\r\\nh1 {\\r\\n    font-size: 1.75rem;\\r\\n    margin: 0 0 5px 0.75rem 0;\\r\\n}\\r\\n\\r\\ntextarea {\\r\\n    resize: none;\\r\\n    max-height: 100%;\\r\\n}\\r\\n\\r\\nbutton {\\r\\n    background-color: #1287c2;\\r\\n}\\r\\n\\r\\n.section {\\r\\n    height: 100vh;\\r\\n}\\r\\n\\r\\n.section-options {\\r\\n    padding: 30px 120px;\\r\\n}\\r\\n\\r\\n.section-menu {\\r\\n    background-color: #101e29;\\r\\n    padding: 50px;\\r\\n    padding-left: 175px;\\r\\n    border-radius: 5px;\\r\\n}\\r\\n\\r\\n.section-menu input[type=\\\"radio\\\"],\\r\\n.section-menu input[type=\\\"checkbox\\\"] {\\r\\n    display: none;\\r\\n}\\r\\n\\r\\n.container-menu {\\r\\n    margin-bottom: 15px;\\r\\n}\\r\\n\\r\\n.container-menu label {\\r\\n    position: relative;\\r\\n}\\r\\n\\r\\n.container-menu span::before,\\r\\n.container-menu span::after {\\r\\n    content: '';\\r\\n    position: absolute;\\r\\n    top: 0;\\r\\n    bottom: 0;\\r\\n    margin: auto;\\r\\n}\\r\\n\\r\\n.container-menu span.radio:hover {\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n.container-menu span.radio::before {\\r\\n    left: -52px;\\r\\n    width: 45px;\\r\\n    height: 25px;\\r\\n    background-color: #A8AAC1;\\r\\n    border-radius: 50px;\\r\\n}\\r\\n\\r\\n.container-menu span.radio::after {\\r\\n    left: -49px;\\r\\n    width: 17px;\\r\\n    height: 17px;\\r\\n    border-radius: 10px;\\r\\n    background-color: #6C788A;\\r\\n    transition: left .3s, background-color .3s;\\r\\n}\\r\\n\\r\\n.container-menu input {\\r\\n    margin-left: -100px;\\r\\n    height: 25px;\\r\\n}\\r\\n\\r\\ninput[type=\\\"radio\\\"]:checked+label span.radio::after {\\r\\n    left: -27px;\\r\\n    background-color: rgb(233, 108, 6);\\r\\n}\\r\\n\\r\\ninput {\\r\\n    margin: 5px;\\r\\n}\\r\\n\\r\\n.btn {\\r\\n    font-size: 14px;\\r\\n    padding: 8px 24px;\\r\\n    margin: 2px;\\r\\n    border: none;\\r\\n    border-radius: 2px;\\r\\n    text-align: center;\\r\\n    text-decoration: none;\\r\\n    display: inline-block;\\r\\n}\\r\\n\\r\\n.btn:hover {\\r\\n    cursor: pointer;\\r\\n}\\r\\n\\r\\n.btn-default {\\r\\n    color: black;\\r\\n    background-color: #e7e7e7;\\r\\n    box-shadow: 0 1px 1px #90007e;\\r\\n}\\r\\n\\r\\n.btn-default:hover {\\r\\n    background-color: #f8f8f8;\\r\\n}\\r\\n\\r\\n.container {\\r\\n    text-align: center;\\r\\n    display: flex;\\r\\n    padding: 5px;\\r\\n    margin: 0 5%;\\r\\n}\\r\\n\\r\\n.left-half {\\r\\n    background-color: #6395bd;\\r\\n    flex: 1;\\r\\n    padding: 1rem;\\r\\n    border-radius: 5px 0 0 5px;\\r\\n}\\r\\n\\r\\n.right-half {\\r\\n    background-color: #174a71;\\r\\n    flex: 1;\\r\\n    padding: 1rem;\\r\\n    border-radius: 0 5px 5px 0;\\r\\n}\\r\\n\\r\\n.title-menu {\\r\\n    text-align: left;\\r\\n    padding: 20px;\\r\\n    padding-left: 50px;\\r\\n}\\r\\n\\r\\n.title {\\r\\n    text-align: center;\\r\\n    padding: 10px;\\r\\n}\\r\\n\\r\\n.footer {\\r\\n    text-align: center;\\r\\n    padding: 10px 0;\\r\\n}\\r\\n\\r\\n#optionButton {\\r\\n    position: fixed;\\r\\n    bottom: 10px;\\r\\n    right: 10px;\\r\\n}\\r\\n\\r\\n#topButton {\\r\\n    position: fixed;\\r\\n    top: 10px;\\r\\n    right: 10px;\\r\\n}\\r\\n\\r\\n@media (max-width: 920px) {\\r\\n    textarea {\\r\\n        max-height: 50%;\\r\\n    }\\r\\n    .container {\\r\\n        display: inline;\\r\\n        padding: 0;\\r\\n        margin: 0;\\r\\n    }\\r\\n    .section-options {\\r\\n        padding: 0;\\r\\n    }\\r\\n\\r\\n    .left-half {\\r\\n        flex: none;\\r\\n        border-radius: 5px 5px 0 0;\\r\\n    }\\r\\n    .right-half {\\r\\n        flex: none;\\r\\n        border-radius: 0 0 5px 5px;\\r\\n    }\\r\\n\\r\\n}\"","module.exports = \"<body>\\n\\n  <div class=\\\"title\\\">\\n    <h3>Typescript Generator</h3>\\n  </div>\\n\\n  <section class=\\\"container\\\">\\n    <div class=\\\"left-half\\\">\\n      <article>\\n        <h1>Put your JSON</h1>\\n\\n        <input #rootClassInput id=\\\"rootClass\\\" type=\\\"text\\\" [(ngModel)]=\\\"rootClass\\\" style=\\\"width: 80%\\\" placeholder=\\\"Class name\\\" />\\n        <textarea id=\\\"json\\\" type=\\\"text\\\" [(ngModel)]=\\\"json\\\" rows=\\\"25\\\" style=\\\"width: 80%\\\" placeholder=\\\"Paste your JSON here..\\\"></textarea>\\n        <p>\\n          <input id=\\\"clearBtn\\\" type=\\\"button\\\" value=\\\"Clear\\\" (click)=\\\"resetFields()\\\" class=\\\"btn btn-default\\\" />\\n          <input id=\\\"generateBtn\\\" type=\\\"button\\\" value=\\\"Generate\\\" (click)=\\\"generate()\\\" class=\\\"btn btn-default\\\" />\\n        </p>\\n      </article>\\n    </div>\\n    <div class=\\\"right-half\\\">\\n      <article>\\n        <h1>Watch the result</h1>\\n        <textarea #resultInput id=\\\"result\\\" type=\\\"text\\\" [(ngModel)]=\\\"result\\\" rows=\\\"25\\\" style=\\\"width: 80%\\\" readonly></textarea>\\n        <p>\\n          <input id=\\\"copyBtn\\\" type=\\\"button\\\" value=\\\"Copy\\\" (click)=\\\"copy()\\\" class=\\\"btn btn-default\\\" />\\n          <input id=\\\"downloadBtn\\\" type=\\\"button\\\" value=\\\"Download\\\" (click)=\\\"downloadContents()\\\" class=\\\"btn btn-default\\\" />\\n        </p>\\n      </article>\\n    </div>\\n  </section>\\n\\n  <section class=\\\"section-options\\\">\\n\\n    <div class=\\\"title-menu\\\">\\n      <h4>What kind of generator do you need?</h4>\\n    </div>\\n\\n    <section class=\\\"section-menu\\\">\\n      <div class=\\\"container-menu\\\" *ngFor=\\\"let genType of generatorTypes | enumToArray\\\">\\n        <input type=\\\"radio\\\" id=\\\"radio-{{ genType.key }}-generator\\\" name=\\\"generatorType\\\" [value]=\\\"genType.val\\\" [(ngModel)]=\\\"generatorType\\\"\\n          (change)=\\\"changeGenerator()\\\">\\n        <label for=\\\"radio-{{ genType.key }}-generator\\\">\\n          <span class=\\\"radio\\\">{{ genType.val }}</span>\\n        </label>\\n      </div>\\n    </section>\\n\\n    <div id=\\\"assignmentOption\\\" *ngIf=\\\"options.supportAssignment()\\\">\\n      <div class=\\\"title-menu\\\">\\n        <h4>What kind of assignment do you need?</h4>\\n      </div>\\n      <section class=\\\"section-menu\\\">\\n        <div class=\\\"container-menu\\\" *ngFor=\\\"let assign of assignments | enumToArray\\\">\\n          <input type=\\\"radio\\\" id=\\\"radio-{{ assign.key }}\\\" name=\\\"assignments\\\" [value]=\\\"assign.val\\\" [(ngModel)]=\\\"options.assignment\\\">\\n          <label for=\\\"radio-{{ assign.key }}\\\">\\n            <span class=\\\"radio\\\">{{ assign.val }}</span>\\n          </label>\\n        </div>\\n      </section>\\n    </div>\\n\\n    <div id=\\\"arrayInstantiationOption\\\" *ngIf=\\\"options.supportArrayInstantiation()\\\">\\n      <div class=\\\"title-menu\\\">\\n        <h4>Do you need to instantiate arrays?</h4>\\n      </div>\\n      <section class=\\\"section-menu\\\">\\n        <div class=\\\"container-menu\\\" *ngFor=\\\"let arrInstant of arrayInstantiation | enumToArray\\\">\\n          <input type=\\\"radio\\\" id=\\\"radio-array-{{ arrInstant.key }}\\\" name=\\\"array-instantiation\\\" [value]=\\\"arrInstant.val\\\" [(ngModel)]=\\\"options.arrayInstantiation\\\">\\n          <label for=\\\"radio-array-{{ arrInstant.key }}\\\">\\n            <span class=\\\"radio\\\">{{ arrInstant.val }}</span>\\n          </label>\\n        </div>\\n      </section>\\n    </div>\\n\\n\\n    <div id=\\\"stringDataTypeOption\\\" *ngIf=\\\"options.supportStrigDataTypeOnly()\\\">\\n      <div class=\\\"title-menu\\\">\\n        <h4>Do you need to work only with the string data type?</h4>\\n      </div>\\n      <section class=\\\"section-menu\\\">\\n        <div class=\\\"container-menu\\\" *ngFor=\\\"let strDtType of stringDataTypeOnly | enumToArray\\\">\\n          <input type=\\\"radio\\\" id=\\\"radio-string-{{ strDtType.key }}\\\" name=\\\"string-data-type\\\" [value]=\\\"strDtType.val\\\" [(ngModel)]=\\\"options.stringDataTypeOnly\\\">\\n          <label for=\\\"radio-string-{{ strDtType.key }}\\\">\\n            <span class=\\\"radio\\\">{{ strDtType.val }}</span>\\n          </label>\\n        </div>\\n      </section>\\n    </div>\\n\\n\\n    <div id=\\\"emptyStringOption\\\" *ngIf=\\\"options.supportEmptyString()\\\">\\n      <div class=\\\"title-menu\\\">\\n        <h4>Do you need to work only with empty string?</h4>\\n      </div>\\n      <section class=\\\"section-menu\\\">\\n        <div class=\\\"container-menu\\\" *ngFor=\\\"let emptyStr of emptyString | enumToArray\\\">\\n          <input type=\\\"radio\\\" id=\\\"radio-empty-string-{{ emptyStr.key }}\\\" name=\\\"empty-string\\\" [value]=\\\"emptyStr.val\\\" [(ngModel)]=\\\"options.emptyString\\\">\\n          <label for=\\\"radio-empty-string-{{ emptyStr.key }}\\\">\\n            <span class=\\\"radio\\\">{{ emptyStr.val }}</span>\\n          </label>\\n        </div>\\n      </section>\\n    </div>\\n\\n\\n    <div id=\\\"encryptionAnnotationOption\\\" *ngIf=\\\"options.supportEncryptionAnnotation()\\\">\\n      <div class=\\\"title-menu\\\">\\n        <h4>What kind of encryption annotation do you need?</h4>\\n      </div>\\n      <section class=\\\"section-menu\\\">\\n        <div class=\\\"container-menu\\\" *ngFor=\\\"let encrypt of encryptions | enumToArray\\\">\\n          <input type=\\\"radio\\\" id=\\\"radio-encryptionAnnotation-{{ encrypt.key }}\\\" name=\\\"encryptionAnnotation\\\" [value]=\\\"encrypt.val\\\" [(ngModel)]=\\\"options.encryption\\\">\\n          <label for=\\\"radio-encryptionAnnotation-{{ encrypt.key }}\\\">\\n            <span class=\\\"radio\\\">{{ encrypt.val }}</span>\\n          </label>\\n        </div>\\n      </section>\\n\\n      <div class=\\\"title-menu\\\">\\n        <h4>Where is the encryption annotation located?</h4>\\n      </div>\\n      <section class=\\\"section-menu\\\">\\n        <div class=\\\"container-menu\\\">\\n          <input id=\\\"encryptionAnnotationPath\\\" type=\\\"text\\\" [(ngModel)]=\\\"options.encryptionPath\\\" placeholder=\\\"Path\\\" />\\n        </div>\\n      </section>\\n    </div>\\n\\n  </section>\\n\\n  <div class=\\\"footer\\\">\\n    <h5>version 5.0.0</h5>\\n  </div>\\n\\n</body>\"","import { Component, OnInit, ViewChild, ElementRef } from '@angular/core';\nimport { SetterWriter } from './generator/writers/setterWriter';\nimport { SetterOptions } from './generator/options/setterOptions';\nimport { ClassWriter } from './generator/writers/classWriter';\nimport { InterfaceWriter } from './generator/writers/interfaceWriter';\nimport { InterfaceOptions } from './generator/options/interfaceOptions';\nimport { ClassOptions } from './generator/options/classOptions';\nimport { Options } from './generator/options/options.interface';\nimport { AlertService } from './service/alert.service';\nimport { GeneratorTypesEnum } from './generator/enums/generatorTypes.enum';\nimport { Writer } from './generator/writers/writer';\nimport { AssignmentsEnum } from './generator/enums/assignments.enum';\nimport { QuestionEnum } from './generator/enums/question.enum';\nimport { EncryptionEnum } from './generator/enums/encryption.enum';\nimport { UtilService } from './service/utils.service';\nimport { SetterGenerator } from './generator/setterGenerator';\nimport { ClassGenerator } from './generator/classGenerator';\nimport { Content } from './generator/models/content';\nimport { Generator } from './generator/generator.interface';\nimport { GeneratorFactory } from './generator/generatorFactory';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  /* FIELDS */\n  @ViewChild('rootClassInput')\n  private rootClassInput: ElementRef;\n\n  @ViewChild('resultInput')\n  private resultInput: ElementRef;\n\n  public rootClass: string;\n  public json: string;\n  public result: string;\n\n  /* OPTIONS */\n  private writer: Writer;\n  public options: Options;\n  public generatorType: GeneratorTypesEnum;\n  public generatorTypes = GeneratorTypesEnum;\n  public assignments = AssignmentsEnum;\n  public arrayInstantiation = QuestionEnum;\n  public stringDataTypeOnly = QuestionEnum;\n  public emptyString = QuestionEnum;\n  public encryptions = EncryptionEnum;\n\n  private contents: Array<Content>;\n\n  ngOnInit(): void {\n    this.contents = new Array<Content>();\n    this.generatorType = GeneratorTypesEnum.CLASS;\n    this.changeGenerator();\n  }\n\n  public changeGenerator() {\n\n    if (this.generatorType === GeneratorTypesEnum.CLASS) {\n      this.options = new ClassOptions();\n      this.writer = new ClassWriter();\n    } else if (this.generatorType === GeneratorTypesEnum.INTERFACE) {\n      this.options = new InterfaceOptions();\n      this.writer = new InterfaceWriter();\n    } else if (this.generatorType === GeneratorTypesEnum.SETTER) {\n      this.options = new SetterOptions();\n      this.writer = new SetterWriter();\n    } else {\n      AlertService.showError(`Generator type was not found: ${this.generatorType}.`);\n    }\n\n  }\n\n  public generate() {\n    let jsonParsed: any;\n    this.clearConsole();\n\n    try {\n      jsonParsed = UtilService.parseJson(this.json);\n\n      const generator: Generator = GeneratorFactory.create(this.generatorType, this.options, this.writer);\n      generator.create(jsonParsed, this.rootClass);\n      this.contents = generator.build();\n    } catch (error) {\n      AlertService.showError('The generator failed to generate the code.', error);\n    }\n    this.printContentsToConsole();\n  }\n\n  public downloadContents() {\n    if (UtilService.isEmpty(this.contents)) {\n      AlertService.showError('No content found.');\n    }\n\n    this.contents.forEach(content => UtilService.downloadText(`${content.name}.ts`, content.text));\n  }\n\n  public resetFields() {\n    this.rootClass = '';\n    this.json = '';\n    this.result = '';\n    this.rootClassInput.nativeElement.focus();\n  }\n\n  public copy() {\n    this.copyContent(this.resultInput);\n    this.clearAllSelections();\n  }\n\n  private printContentsToConsole() {\n    if (UtilService.isEmpty(this.contents)) {\n      AlertService.showError('No content was generated.');\n    }\n\n    this.contents.forEach(content => this.result += content.text);\n  }\n\n  private clearConsole() {\n    this.result = '';\n  }\n\n  private copyContent(element: ElementRef) {\n    try {\n      element.nativeElement.select();\n      document.execCommand('Copy');\n    } catch (error) {\n      AlertService.showError('Cannot copy the selected content.', error);\n    }\n  }\n\n  private clearAllSelections() {\n    if (window.getSelection) {\n      window.getSelection().removeAllRanges();\n    } else if (document.getSelection) {\n      document.getSelection().empty();\n    }\n  }\n\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { AppComponent } from './app.component';\nimport { EnumToArrayPipe } from './pipe/enumToArray.pipe';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    EnumToArrayPipe\n  ],\n  imports: [\n    BrowserModule, \n    FormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { UtilService } from './service/utils.service';\r\nimport { Class } from './models/class';\r\nimport { Import } from './models/import';\r\nimport { ArrayAttribute } from './models/arrayAttribute';\r\nimport { Attribute } from './models/attribute';\r\nimport { Options } from './options/options.interface';\r\nimport { ClassWriter } from './writers/classWriter';\r\nimport { EncryptionEnum } from './enums/encryption.enum';\r\nimport { AssignmentsEnum } from './enums/assignments.enum';\r\nimport { Content } from './models/content';\r\nimport { Generator } from './generator.interface';\r\n\r\nexport class ClassGenerator implements Generator {\r\n\r\n    private classList: Array<Class>;\r\n    private options: Options;\r\n    private writer: ClassWriter;\r\n\r\n    constructor(options: Options, writer: ClassWriter) {\r\n\r\n        if (!options) {\r\n            throw new Error('Options cannot be empty.');\r\n        }\r\n\r\n        if (!writer) {\r\n            throw new Error('The writer cannot be null.');\r\n        }\r\n\r\n        this.options = options;\r\n        this.writer = writer as ClassWriter;\r\n        this.classList = new Array<Class>();\r\n    }\r\n\r\n    create(json: any, fieldName: string) {\r\n\r\n        if (!json) {\r\n            return;\r\n        }\r\n\r\n        if (UtilService.isBlank(fieldName)) {\r\n            throw new Error('Class name cannot be blank.');\r\n        }\r\n\r\n        const className: string = UtilService.getClassName(fieldName);\r\n        const clazz: Class = new Class(className);\r\n        this.classList.push(clazz);\r\n        let isEncryptionImportApplied;\r\n\r\n        for (let field in json) {\r\n\r\n            if (UtilService.isBlank(field)) {\r\n                throw new Error('Field name cannot be blank.');\r\n            }\r\n\r\n            const val: any = json[field];\r\n            const isFieldAnArray: boolean = Array.isArray(val);\r\n            field = UtilService.fixFieldName(field);\r\n\r\n            if (isFieldAnArray) {\r\n                const isFieldAnObject: boolean = UtilService.isObject(val[0]);\r\n                const fieldType: string = UtilService.getType(val[0]);\r\n\r\n                if (isFieldAnObject) {\r\n                    clazz.imports.push(new Import(UtilService.getClassName(field), `./${field}`));\r\n                    clazz.arrayAttributes.push(new ArrayAttribute(field, UtilService.getClassName(field)));\r\n                    this.create(val[0], field);\r\n                } else {\r\n                    clazz.arrayAttributes.push(new ArrayAttribute(field, fieldType));\r\n                }\r\n\r\n            } else {\r\n                const isFieldAnObject: boolean = UtilService.isObject(val);\r\n                const fieldType: string = UtilService.getType(val);\r\n\r\n                if (isFieldAnObject) {\r\n                    clazz.imports.push(new Import(UtilService.getClassName(field), `./${field}`));\r\n                    clazz.attributes.push(new Attribute(field, UtilService.getClassName(field)));\r\n                    this.create(val, field);\r\n                } else {\r\n                    const isEncrypted: boolean = UtilService.isBase64(val);\r\n\r\n                    if (this.options.encryption === EncryptionEnum.ENCRYPT && isEncrypted) {\r\n                        clazz.attributes.push(new Attribute(field, fieldType, this.options.encryption));\r\n\r\n                        if (!isEncryptionImportApplied && this.options.encryptionPath) {\r\n                            clazz.imports.push(new Import(this.options.encryption, this.options.encryptionPath));\r\n                            isEncryptionImportApplied = true;\r\n                        }\r\n                    } else {\r\n                        clazz.attributes.push(new Attribute(field, fieldType));\r\n                    }\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    build(): Array<Content> {\r\n        const contents: Array<Content> = new Array<Content>();\r\n\r\n        this.classList.forEach((clazz: Class) => {\r\n\r\n            clazz.imports.forEach((imp: Import) => {\r\n                this.writer.writeImport(imp);\r\n            });\r\n\r\n            this.writer.writeLine();\r\n            this.writer.writeStartClass(clazz);\r\n\r\n            if (this.options.assignment === AssignmentsEnum.SETTER_METHOD) {\r\n                clazz.attributes.forEach((attr: Attribute) => {\r\n                    if (attr.annotation) {\r\n                        this.writer.writeAnnotation(attr.annotation);\r\n                    }\r\n                    this.writer.writeSetterAttribute(attr);\r\n                });\r\n                clazz.arrayAttributes.forEach((arrAttr: ArrayAttribute) => this.writer.writeSetterArrayAttribute(arrAttr));\r\n                this.writer.writeLine();\r\n\r\n                clazz.attributes.forEach((attr: Attribute) => {\r\n                    this.writer.writeGetter(attr);\r\n                    this.writer.writeSetter(attr);\r\n                });\r\n\r\n                clazz.arrayAttributes.forEach((arrAttr: ArrayAttribute) => {\r\n                    this.writer.writeArrayGetter(arrAttr);\r\n                    this.writer.writeArraySetter(arrAttr);\r\n                });\r\n\r\n            } else {\r\n                clazz.attributes.forEach((attr: Attribute) => {\r\n                    if (attr.annotation) {\r\n                        this.writer.writeAnnotation(attr.annotation);\r\n                    }\r\n                    this.writer.writeAttribute(attr);\r\n                });\r\n                clazz.arrayAttributes.forEach((arrAttr: ArrayAttribute) => this.writer.writeArrayAttribute(arrAttr));\r\n            }\r\n\r\n            this.writer.writeEndClass();\r\n            this.writer.writeLine();\r\n\r\n            contents.push(new Content(clazz.className, this.writer.toString()));\r\n            this.writer.reset();\r\n        });\r\n\r\n        return contents;\r\n    }\r\n\r\n}","export enum AssignmentsEnum {\r\n    ASSIGNMENT_SIGNAL = 'Assignment signal',\r\n    SETTER_METHOD = 'Setter method'\r\n}","export enum EncryptionEnum {\r\n    NONE = 'None',\r\n    ENCRYPT = 'Encrypt',\r\n    DESCRYPT = 'Descrypt'\r\n}","export enum GeneratorTypesEnum {\r\n    CLASS = 'Class',\r\n    INTERFACE = 'Interface',\r\n    SETTER = 'Setter'\r\n}","export enum QuestionEnum {\r\n    YES = 'Yes',\r\n    NO = 'No, thanks'\r\n}","import { GeneratorTypesEnum } from \"./enums/generatorTypes.enum\";\r\nimport { SetterGenerator } from \"./setterGenerator\";\r\nimport { SetterWriter } from \"./writers/setterWriter\";\r\nimport { ClassWriter } from \"./writers/classWriter\";\r\nimport { ClassGenerator } from \"./classGenerator\";\r\nimport { Options } from \"./options/options.interface\";\r\nimport { Writer } from \"./writers/writer\";\r\nimport { Generator } from \"./generator.interface\";\r\n\r\nexport class GeneratorFactory {\r\n\r\n    static create(generatorType: GeneratorTypesEnum, options: Options, writer: Writer): Generator {\r\n\r\n\r\n        switch (generatorType) {\r\n            case GeneratorTypesEnum.CLASS:\r\n            case GeneratorTypesEnum.INTERFACE:\r\n                return new ClassGenerator(options, writer as ClassWriter);\r\n            case GeneratorTypesEnum.SETTER:\r\n                return new SetterGenerator(options, writer as SetterWriter);\r\n            default:\r\n                throw new Error(`Generator was not found: ${generatorType}`);\r\n        }\r\n    }\r\n}","export class ArrayAttribute {\r\n    fieldName: string;\r\n    fieldType: string;\r\n\r\n    constructor(fieldName: string, fieldType: string) {\r\n        this.fieldName = fieldName;\r\n        this.fieldType = fieldType;\r\n    }\r\n}","export class ArrayInstance {\r\n    fieldName: string;\r\n    fieldType: string;\r\n\r\n    constructor(fieldName: string, fieldType: string) {\r\n        this.fieldName = fieldName;\r\n        this.fieldType = fieldType;\r\n    }\r\n}","export class ArraySetter {\r\n    fieldName: string;\r\n    value: string;\r\n\r\n    constructor(fieldName: string, value: string) {\r\n        this.fieldName = fieldName;\r\n        this.value = value;\r\n    }\r\n}","export class Attribute {\r\n    fieldName: string;\r\n    fieldType: string;\r\n    annotation: string;\r\n\r\n    constructor(fieldName: string, fieldType: string, annotation?: string) {\r\n        this.fieldName = fieldName;\r\n        this.fieldType = fieldType;\r\n        this.annotation = annotation;\r\n    }\r\n}","import { Import } from './import';\r\nimport { Attribute } from './attribute';\r\nimport { ArrayAttribute } from './arrayAttribute';\r\n\r\nexport class Class {\r\n    className: string;\r\n    imports:Array<Import>;\r\n    attributes:Array<Attribute>;\r\n    arrayAttributes:Array<ArrayAttribute>;\r\n\r\n    constructor(className: string) {\r\n        this.className = className;\r\n        this.imports = new Array<Import>();\r\n        this.attributes = new Array<Attribute>()\r\n        this.arrayAttributes = new Array<ArrayAttribute>()\r\n    }\r\n}","export class Content {\r\n    name: string;\r\n    text: string;\r\n\r\n    constructor(name: string, text: string) {\r\n        this.name = name;\r\n        this.text = text;\r\n    }\r\n}","export class Import {\r\n    className: string;\r\n    path: string;\r\n\r\n    constructor(className: string, path: string) {\r\n        this.className = className;\r\n        this.path = path;\r\n    }\r\n}","export class Instance {\r\n    className: string;\r\n    fieldName: string;\r\n\r\n    constructor(fieldName: string, className: string) {\r\n        this.fieldName = fieldName;\r\n        this.className = className;\r\n    }\r\n}","export class Setter {\r\n    fieldName: string;\r\n    methodName: string;\r\n    value: string;\r\n\r\n    constructor(fieldName: string, methodName: string, value: string) {\r\n        this.fieldName = fieldName;\r\n        this.methodName = methodName;\r\n        this.value = value;\r\n    }\r\n}","import { Options } from './options.interface';\r\nimport { AssignmentsEnum } from '../enums/assignments.enum';\r\nimport { QuestionEnum } from '../enums/question.enum';\r\nimport { EncryptionEnum } from '../enums/encryption.enum';\r\n\r\nexport class ClassOptions implements Options {\r\n    assignment: AssignmentsEnum;\r\n    stringDataTypeOnly: QuestionEnum;\r\n    emptyString: QuestionEnum;\r\n    arrayInstantiation: QuestionEnum;\r\n    encryption: EncryptionEnum;\r\n    encryptionPath: string;\r\n\r\n    constructor() {\r\n        this.assignment = AssignmentsEnum.ASSIGNMENT_SIGNAL;\r\n        this.encryption = EncryptionEnum.NONE;\r\n    }\r\n\r\n    supportAssignment(): boolean {\r\n        return true;\r\n    }\r\n\r\n    supportStrigDataTypeOnly(): boolean {\r\n        return false;\r\n    }\r\n\r\n    supportArrayInstantiation(): boolean {\r\n        return false;\r\n    }\r\n\r\n    supportEmptyString(): boolean {\r\n        return false;\r\n    }\r\n\r\n    supportEncryptionAnnotation(): boolean {\r\n        return true;\r\n    }\r\n\r\n}","import { Options } from './options.interface';\r\nimport { AssignmentsEnum } from '../enums/assignments.enum';\r\nimport { QuestionEnum } from '../enums/question.enum';\r\nimport { EncryptionEnum } from '../enums/encryption.enum';\r\n\r\nexport class InterfaceOptions implements Options {\r\n    assignment: AssignmentsEnum;\r\n    stringDataTypeOnly: QuestionEnum;\r\n    emptyString: QuestionEnum;\r\n    arrayInstantiation: QuestionEnum;\r\n    encryption: EncryptionEnum;\r\n    encryptionPath: string;\r\n\r\n    supportAssignment(): boolean {\r\n        return false;\r\n    }\r\n\r\n    supportStrigDataTypeOnly(): boolean {\r\n        return false;\r\n    }\r\n\r\n    supportArrayInstantiation(): boolean {\r\n        return false;\r\n    }\r\n\r\n    supportEmptyString(): boolean {\r\n        return false;\r\n    }\r\n\r\n    supportEncryptionAnnotation(): boolean {\r\n        return false;\r\n    }\r\n\r\n}","import { Options } from './options.interface';\r\nimport { AssignmentsEnum } from '../enums/assignments.enum';\r\nimport { QuestionEnum } from '../enums/question.enum';\r\nimport { EncryptionEnum } from '../enums/encryption.enum';\r\n\r\nexport class SetterOptions implements Options {\r\n    assignment: AssignmentsEnum;\r\n    stringDataTypeOnly: QuestionEnum;\r\n    emptyString: QuestionEnum;\r\n    arrayInstantiation: QuestionEnum;\r\n    encryption: EncryptionEnum;\r\n    encryptionPath: string;\r\n    \r\n    constructor() {\r\n        this.assignment = AssignmentsEnum.ASSIGNMENT_SIGNAL;\r\n        this.arrayInstantiation = QuestionEnum.YES;\r\n        this.stringDataTypeOnly = QuestionEnum.YES;\r\n        this.emptyString = QuestionEnum.YES;\r\n    }\r\n\r\n    supportAssignment(): boolean {\r\n        return true;\r\n    }\r\n\r\n    supportStrigDataTypeOnly(): boolean {\r\n        return true;\r\n    }\r\n\r\n    supportArrayInstantiation(): boolean {\r\n        return true;\r\n    }\r\n\r\n    supportEmptyString(): boolean {\r\n        return true;\r\n    }\r\n\r\n    supportEncryptionAnnotation(): boolean {\r\n        return false;\r\n    }\r\n\r\n}","export class UtilService {\r\n\r\n\r\n    static getListFieldName(fieldName: string, value: any): string {\r\n        if (fieldName) {\r\n            return Array.isArray(value) ? fieldName.concat('List') : fieldName.replace('List', '');\r\n        }\r\n    }\r\n\r\n    static getNumberFromString(str: string): number {\r\n        if (str) {\r\n            const valuesFound: string[] = str.match(/\\d+/g);\r\n            if (valuesFound) {\r\n                return Number.parseInt(valuesFound.join(''));\r\n            }\r\n        }\r\n    }\r\n\r\n    static isEmpty(obj: Array<any>): boolean {\r\n        return !obj || obj.length == 0;\r\n    }\r\n\r\n    static getClassName(name: string): string {\r\n        let result: string;\r\n        if (name) {\r\n            result = name.charAt(0).toUpperCase();\r\n            if (name.length > 1) {\r\n                result += name.substring(1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static getType(val: any): string {\r\n        return val ? typeof val : 'string';\r\n    }\r\n\r\n    static fixFieldName(name: string): string {\r\n        let result: string;\r\n        if (name) {\r\n            result = name.charAt(0).toLowerCase();\r\n            if (name.length > 1) {\r\n                result += name.substring(1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static fixValue(val: any, useOnlyStringDataType: boolean): string {\r\n        let valFixed: string;\r\n        if (!val) {\r\n            valFixed = \"''\";\r\n        } else if (useOnlyStringDataType || typeof val == 'string') {\r\n            valFixed = \"'\" + val + \"'\";\r\n        } else {\r\n            valFixed = val;\r\n        }\r\n        return valFixed;\r\n    }\r\n\r\n    static fixMethodName(name: string): string {\r\n        let result: string;\r\n        if (name) {\r\n            result = name.charAt(0).toUpperCase();\r\n            if (name.length > 1) {\r\n                result += name.substring(1);\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    static isBlank(val: string): boolean {\r\n        return val ? val.indexOf(' ') != -1 : true;\r\n    }\r\n\r\n    static isObject(val: any): boolean {\r\n        return typeof val == 'object';\r\n    }\r\n\r\n    static isBase64(str: string): boolean {\r\n        try {\r\n            return str ? btoa(atob(str)) == str : false;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n}","import { Options } from './options/options.interface';\r\nimport { Instance } from './models/instance';\r\nimport { ArrayInstance } from './models/arrayInstance';\r\nimport { ArraySetter } from './models/arraySetter';\r\nimport { UtilService } from './service/utils.service';\r\nimport { SetterWriter } from './writers/setterWriter';\r\nimport { AssignmentsEnum } from './enums/assignments.enum';\r\nimport { QuestionEnum } from './enums/question.enum';\r\nimport { Content } from './models/content';\r\nimport { Setter } from './models/setter';\r\nimport { Generator } from './generator.interface';\r\n\r\nexport class SetterGenerator implements Generator {\r\n\r\n    private fieldNameMap: Map<string, string>;\r\n    private instances: Array<Instance>;\r\n    private arrayInstances: Array<ArrayInstance>;\r\n    private instanceSetters: Array<Setter>;\r\n    private arrayInstanceSetters: Array<ArraySetter>;\r\n    private arraySetters: Array<ArraySetter>;\r\n    private setters: Array<Setter>;\r\n    private options: Options;\r\n    private writer: SetterWriter;\r\n\r\n    constructor(options: Options, writer: SetterWriter) {\r\n        \r\n        if (!options) {\r\n            throw new Error('Options cannot be empty.');\r\n        }\r\n\r\n        if (!writer) {\r\n            throw new Error('The writer cannot be null.');\r\n        }\r\n        \r\n        this.options = options;\r\n        this.writer = writer;\r\n        this.fieldNameMap = new Map<string, string>();\r\n        this.instances = new Array<Instance>();\r\n        this.arrayInstances = new Array<ArrayInstance>();\r\n        this.instanceSetters = new Array<Setter>();\r\n        this.arrayInstanceSetters = new Array<ArraySetter>();\r\n        this.arraySetters = new Array<ArraySetter>();\r\n        this.setters = new Array<Setter>();\r\n    }\r\n\r\n    create(json: any, fieldName: string, className?: string): void {\r\n\r\n        if (!json) {\r\n            return;\r\n        }\r\n\r\n        if (UtilService.isBlank(fieldName)) {\r\n            throw new Error('Field name cannot be blank.');\r\n        }\r\n\r\n        fieldName = UtilService.fixFieldName(fieldName);\r\n        className = className || UtilService.getClassName(fieldName);\r\n        const isArray: boolean = Array.isArray(json);\r\n        const nextFieldName: string = this.memorizeNextFieldName(fieldName);\r\n\r\n        if (isArray) {\r\n            let fieldType: string = UtilService.getType(json[0]);\r\n\r\n            if (fieldType === 'object') {\r\n                fieldType = className;\r\n            }\r\n\r\n            this.arrayInstances.push(new ArrayInstance(fieldName, fieldType));\r\n        } else {\r\n            this.instances.push(new Instance(nextFieldName, className));\r\n        }\r\n\r\n        for (let field in json) {\r\n\r\n            if (UtilService.isBlank(field)) {\r\n                throw new Error('Field name cannot be blank.');\r\n            }\r\n\r\n            const val: any = json[field];\r\n            const isFieldAnObject: boolean = UtilService.isObject(val);\r\n            const isFieldAnArray: boolean = Array.isArray(val);\r\n\r\n            if (this.options.arrayInstantiation === QuestionEnum.NO && isFieldAnArray)\r\n                continue;\r\n\r\n            field = UtilService.fixFieldName(field);\r\n\r\n            if (isArray) {\r\n                if (isFieldAnObject) {\r\n                    const name: string = UtilService.getListFieldName(fieldName, val);\r\n                    this.arrayInstanceSetters.push(new ArraySetter(fieldName, this.generateNextFieldName(name)));\r\n                    this.create(val, name, UtilService.getClassName(name));\r\n                } else {\r\n                    this.arraySetters.push(new ArraySetter(nextFieldName,\r\n                        UtilService.fixValue(val, this.options.stringDataTypeOnly === QuestionEnum.YES)));\r\n                }\r\n\r\n            } else {\r\n                if (isFieldAnObject) {\r\n                    const name: string = UtilService.getListFieldName(field, val);\r\n                    this.instanceSetters.push(new Setter(nextFieldName, field, name));\r\n                    this.create(val, name, UtilService.getClassName(field));\r\n                } else {\r\n                    if (this.options.emptyString === QuestionEnum.YES || val) {\r\n                        this.setters.push(new Setter(nextFieldName, field,\r\n                            UtilService.fixValue(val, this.options.stringDataTypeOnly === QuestionEnum.YES)));\r\n                    }\r\n                }\r\n\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    build(): Array<Content> {\r\n        const contents: Array<Content> = new Array<Content>();\r\n\r\n        this.instances.forEach((i: Instance) => this.writer.writeInstance(i));\r\n        this.arrayInstances.forEach((ai: ArrayInstance) => this.writer.writeArrayInstance(ai));\r\n        this.writer.writeLine();\r\n\r\n        if (this.options.assignment === AssignmentsEnum.SETTER_METHOD) {\r\n            this.instanceSetters.forEach((is: Setter) => this.writer.writeSetter(is));\r\n        } else {\r\n            this.instanceSetters.forEach((is: Setter) => this.writer.writeAssignment(is));\r\n        }\r\n        if (!UtilService.isEmpty(this.instanceSetters)) this.writer.writeLine();\r\n\r\n        this.arrayInstanceSetters.forEach((ais: ArraySetter) => this.writer.writeArraySetter(ais));\r\n        if (!UtilService.isEmpty(this.arrayInstanceSetters)) this.writer.writeLine();\r\n\r\n        this.arraySetters.forEach((as: ArraySetter) => this.writer.writeArraySetter(as));\r\n        if (!UtilService.isEmpty(this.arraySetters)) this.writer.writeLine();\r\n\r\n        if (this.options.assignment === AssignmentsEnum.SETTER_METHOD) {\r\n            this.setters.forEach((s: Setter) => this.writer.writeSetter(s));\r\n        } else {\r\n            this.setters.forEach((s: Setter) => this.writer.writeAssignment(s));\r\n        }\r\n\r\n        contents.push(new Content('Setters', this.writer.toString()));\r\n        this.writer.reset();\r\n\r\n        return contents;\r\n    }\r\n\r\n    private memorizeNextFieldName(fieldName: string): string {\r\n        let nextFieldName: string = this.generateNextFieldName(fieldName);\r\n        this.fieldNameMap.set(fieldName, nextFieldName);\r\n        return nextFieldName;\r\n    }\r\n\r\n    private generateNextFieldName(fieldName: string): string {\r\n        let nextFieldName: string = fieldName;\r\n        \r\n        if (this.fieldNameMap.has(fieldName)) {\r\n            let fieldCounter: number;\r\n            const fieldNameFromMap = this.fieldNameMap.get(fieldName);\r\n\r\n            if (fieldCounter = UtilService.getNumberFromString(fieldNameFromMap)) {\r\n                nextFieldName = fieldNameFromMap.replace(fieldCounter.toString(), (fieldCounter + 1).toString());\r\n            } else {\r\n                nextFieldName = fieldNameFromMap + '1';\r\n            }\r\n        }\r\n        return nextFieldName;\r\n    }\r\n\r\n}","import { Writer } from './writer';\r\nimport { Import } from '../models/import';\r\nimport { Class } from '../models/class';\r\nimport { Attribute } from '../models/attribute';\r\nimport { ArrayAttribute } from '../models/arrayAttribute';\r\n\r\nexport class ClassWriter extends Writer {\r\n\r\n    // import { className } from 'path';\r\n    writeImport(imp: Import): void {\r\n        const syntax = `import { ${imp.className} } from '${imp.path}';`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // class className {\r\n    writeStartClass(clazz: Class): void {\r\n        const syntax = `export class ${clazz.className} {`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // }\r\n    writeEndClass(): void {\r\n        const syntax = '}';\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // @name\r\n    writeAnnotation(name: string): void {\r\n        const syntax = `\t@${name}`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // fieldName: fieldType;\r\n    writeAttribute(attribute: Attribute): void {\r\n        const syntax = `\t${attribute.fieldName}: ${attribute.fieldType};`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // private _fieldName: fieldType;\r\n    writeSetterAttribute(attribute: Attribute): void {\r\n        const syntax = `\tprivate _${attribute.fieldName}: ${attribute.fieldType};`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // fieldName: Array<fieldType> = [];\r\n    writeArrayAttribute(arrayAttribute: ArrayAttribute): void {\r\n        const syntax = `\t${arrayAttribute.fieldName}: Array<${arrayAttribute.fieldType}> = [];`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // private _fieldName: Array<fieldType> = [];\r\n    writeSetterArrayAttribute(arrayAttribute: ArrayAttribute): void {\r\n        const syntax = `\tprivate _${arrayAttribute.fieldName}: Array<${arrayAttribute.fieldType}> = [];`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // get fieldName(): fieldType {\r\n    //\treturn this._fieldName;\r\n    // }\r\n    writeGetter(attribute: Attribute): void {\r\n        const startSyntax = `\tget ${attribute.fieldName}(): ${attribute.fieldType} {`;\r\n        const middleSyntax = `\t\treturn this._${attribute.fieldName};`;\r\n        const endSyntax = '\t}';\r\n\r\n        this.write(startSyntax);\r\n        this.writeLine();\r\n        this.write(middleSyntax);\r\n        this.writeLine();\r\n        this.write(endSyntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // get fieldName(): fieldType[] {\r\n    //\treturn this._fieldName;\r\n    // }\r\n    writeArrayGetter(arrayAttribute: ArrayAttribute): void {\r\n        const startSyntax = `\tget ${arrayAttribute.fieldName}(): ${arrayAttribute.fieldType}[] {`;\r\n        const middleSyntax = `\t\treturn this._${arrayAttribute.fieldName};`;\r\n        const endSyntax = '\t}';\r\n\r\n        this.write(startSyntax);\r\n        this.writeLine();\r\n        this.write(middleSyntax);\r\n        this.writeLine();\r\n        this.write(endSyntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // set fieldName(fieldName: fieldType): void {\r\n    //\tthis._fieldName = fieldName;\r\n    // }\r\n    writeSetter(attribute: Attribute): void {\r\n        const startSyntax = `\tset ${attribute.fieldName}(${attribute.fieldName}: ${attribute.fieldType}): void {`;\r\n        const middleSyntax = `\t\tthis._${attribute.fieldName} = ${attribute.fieldName};`;\r\n        const endSyntax = '\t}';\r\n\r\n        this.write(startSyntax);\r\n        this.writeLine();\r\n        this.write(middleSyntax);\r\n        this.writeLine();\r\n        this.write(endSyntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // set fieldName(fieldName: fieldType[]): void {\r\n    //\tthis._fieldName = fieldName;\r\n    // }\r\n    writeArraySetter(arrayAttribute: ArrayAttribute): void {\r\n        const startSyntax = `\tset ${arrayAttribute.fieldName}(${arrayAttribute.fieldName}: ${arrayAttribute.fieldType}[]): void {`;\r\n        const middleSyntax = `\t\tthis._${arrayAttribute.fieldName} = ${arrayAttribute.fieldName}`;\r\n        const endSyntax = `\t}`;\r\n\r\n        this.write(startSyntax);\r\n        this.writeLine();\r\n        this.write(middleSyntax);\r\n        this.writeLine();\r\n        this.write(endSyntax);\r\n        this.writeLine();\r\n    }\r\n\r\n}","import { ClassWriter } from './classWriter';\r\nimport { Class } from '../models/class';\r\nimport { ArrayAttribute } from '../models/arrayAttribute';\r\n\r\nexport class InterfaceWriter extends ClassWriter {\r\n\r\n    // interface className {\r\n    writeStartClass(clazz: Class): void {\r\n        const syntax = `export interface ${clazz.className} {`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // fieldName: Array<fieldType>;\r\n    writeArrayAttribute(arrayAttribute: ArrayAttribute): void {\r\n        const syntax = `\t${arrayAttribute.fieldName}: Array<${arrayAttribute.fieldType}>;`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n}","import { Writer } from './writer';\r\nimport { UtilService } from '../service/utils.service';\r\nimport { Instance } from '../models/instance';\r\nimport { ArrayInstance } from '../models/arrayInstance';\r\nimport { ArraySetter } from '../models/arraySetter';\r\nimport { Setter } from '../models/setter';\r\n\r\nexport class SetterWriter extends Writer {\r\n\r\n    // const fieldName: className = new className();\r\n    writeInstance(instance: Instance): void {\r\n        const syntax = `const ${instance.fieldName}: ${instance.className} = new ${instance.className}();`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // const fieldName: Array<fieldType> = [];\r\n    writeArrayInstance(arrayInstance: ArrayInstance): void {\r\n        const syntax = `const ${arrayInstance.fieldName}: Array<${arrayInstance.fieldType}> = [];`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // fieldName.push(value);\r\n    writeArraySetter(arraySetter: ArraySetter): void {\r\n        const syntax = `${arraySetter.fieldName}.push(${arraySetter.value});`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // fieldName.methodName = value;\r\n    writeAssignment(setter: Setter): void {\r\n        const syntax = `${setter.fieldName}.${setter.methodName} = ${setter.value};`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n    // fieldName.methodName = value;\r\n    writeSetter(setter: Setter): void {\r\n        const syntax = `${setter.fieldName}.set${UtilService.fixMethodName(setter.methodName)}(${setter.value});`;\r\n\r\n        this.write(syntax);\r\n        this.writeLine();\r\n    }\r\n\r\n}","export class Writer {\r\n    private text: string;\r\n\r\n    constructor() {\r\n        this.text = '';\r\n    }\r\n\r\n    writeLine(): void {\r\n        this.write('\\n');\r\n    }\r\n\r\n    write(str): void {\r\n        this.text += str;\r\n    }\r\n\r\n    reset(): void {\r\n        this.text = '';\r\n    }\r\n\r\n    toString(): string {\r\n        return this.text;\r\n    }\r\n}","import { Pipe, PipeTransform } from '@angular/core';\r\n\r\n@Pipe({ name: 'enumToArray' })\r\nexport class EnumToArrayPipe implements PipeTransform {\r\n  transform(data: any): Object[] {\r\n    const returnArray = new Array<any>();\r\n\r\n    const keys: any[] = Object.keys(data);\r\n    const values: any[] = Object.values(data);\r\n\r\n    for (let i = 0; i < keys.length; i++) {\r\n      returnArray.push({\r\n        key: keys[i],\r\n        val: values[i]\r\n      });\r\n    }\r\n\r\n    return returnArray;\r\n  }\r\n}","export class AlertService {\r\n\r\n    static showError(message: string, error?: any): void {\r\n        if (error) {\r\n            console.error(error);\r\n        }\r\n        this.showMessage('Error: ' + message);\r\n        throw new Error(message);\r\n    }\r\n\r\n    static showMessage(message: string): void {\r\n        alert(message);\r\n    }\r\n\r\n}","export class UtilService {\r\n\r\n    private static downloadLink: any;\r\n\r\n    static downloadText(fileName: string, text: string): void {\r\n        this.download(fileName, text, 'text/plain');\r\n    }\r\n\r\n    static download(fileName: string, content: any, type: any): void {\r\n        const contentAsBlob = new Blob([content], { type: type });\r\n        this.downloadLink = document.createElement('a');\r\n        this.downloadLink.download = fileName;\r\n        this.downloadLink.href = window.URL.createObjectURL(contentAsBlob);\r\n        this.downloadLink.click();\r\n    }\r\n\r\n    static isEmpty(obj: Array<any>): boolean {\r\n        return !obj || obj.length == 0;\r\n    }\r\n\r\n    static isBlank(val: string): boolean {\r\n        return val ? val.indexOf(' ') != -1 : true;\r\n    }\r\n\r\n    static isObject(val: any): boolean {\r\n        return typeof val == 'object';\r\n    }\r\n\r\n    static parseJson(json: any): any {\r\n        const jsonParsed: any = JSON.parse(json);\r\n        if (jsonParsed && this.isObject(jsonParsed)) {\r\n            return jsonParsed;\r\n        }\r\n    }\r\n\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}